@rendermode RenderMode.InteractiveServer

@inject NotificationService _notificationService;
@inject Radzen.DialogService _dialogService;
@inject IFileCacheService _fileCacheService;
@inject IKnowledgeBaseService _knowledgeBaseService;

<RadzenNotification />

<RadzenTemplateForm TItem="ImportDocumentModel" Data=@_model Submit=@OnSubmitAsync>
    <RadzenStack>
        <RadzenFormField Text="Document Id">
            <ChildContent>
                <RadzenTextBox Name="DocumentId" @bind-Value=@_model.Id />
            </ChildContent>
            <Helper>
                <RadzenRequiredValidator Component="DocumentId" Text="Doc ID is required." />
            </Helper>
        </RadzenFormField>
        <RadzenFormField Text="Document">
            <RadzenUpload Url="upload/single" Progress=@(args => OnProgressAsync(args, "Single file upload")) class="w-100" InputAttributes="@(new Dictionary<string,object>(){ { "aria-label", "select file" }})">
            </RadzenUpload>
        </RadzenFormField>        
        <RadzenButton ButtonType="ButtonType.Submit" Text="Submit"></RadzenButton>
    </RadzenStack>
</RadzenTemplateForm>


@code {
    ImportDocumentModel _model = new();

    private void ShowNotification(NotificationMessage message) => _notificationService.Notify(message);

    private async Task OnProgressAsync(UploadProgressArgs args, string name)
    {
        if (args.Progress == 100)
        {
            _model.Filename = args.Files.Last().Name;
            ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Success, Summary = "File uploaded", Detail = $"File {_model.Filename} cached successfully", Duration = 4000 });
        }
    }

    private async Task OnSubmitAsync()
    {
        try
        {

            _model.Blob = _fileCacheService.GetFile(_model.Filename);
            _model.Blob?.Seek(0, SeekOrigin.Begin);

            await _knowledgeBaseService.ImportPdfAsync(_model.Filename, _model.Blob);

            _dialogService.CloseSide();
        }
        catch (Exception ex)
        {
            var errorNotification = new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Error importing", Detail = $"File {_model.Filename} failed on import", Duration = 5000 };
            ShowNotification(errorNotification);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }
}